name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

jobs:
  Test:
    runs-on: ubuntu-latest
    timeout-minutes: 10  # Giới hạn thời gian

    services:
      mongodb:
        image: mongo:6
        ports:
          - 27017:27017

    steps:
      - name: Checkout code
        uses: actions/checkout@v4  # Nâng cấp lên version mới

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: |
            auth/package-lock.json
            product/package-lock.json

      - name: Install dependencies
        run: |
          cd auth && npm ci --prefer-offline --no-audit
          cd ../product && npm ci --prefer-offline --no-audit

      - name: Setup test environment
        run: |
          # Chỉ setup biến môi trường cần thiết cho test
          echo "MONGODB_AUTH_URI=mongodb://localhost:27017/auth_test" >> auth/.env
          echo "JWT_SECRET=test-jwt-secret" >> auth/.env
          echo "MONGODB_PRODUCT_URI=mongodb://localhost:27017/product_test" >> product/.env
          echo "JWT_SECRET=test-jwt-secret" >> product/.env

      - name: Wait for MongoDB
        run: |
          echo "Waiting for MongoDB..."
          timeout 20s bash -c 'until nc -z localhost 27017; do sleep 2; done'
          echo "MongoDB ready!"

      - name: Run auth tests
        run: |
          cd auth
          npm test

      - name: Start auth service & run product tests
        run: |
          # Chạy auth service và product tests song song
          cd auth && npm start &
          cd ../product
          npx wait-on http://localhost:3000 --timeout 15000 || echo "Auth service starting..."
          npm test

      - name: Cleanup
        if: always()
        run: pkill -f "node" || true

  build-and-push:
    name: Build & Push
    needs: Test
    if: success() && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    timeout-minutes: 8

    strategy:
      matrix:
        service: [api-gateway, auth, product, order]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build & push ${{ matrix.service }}
        uses: docker/build-push-action@v6
        with:
          context: ./${{ matrix.service }}
          file: ./${{ matrix.service }}/Dockerfile
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/${{ matrix.service }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64  # Chỉ build 1 platform để tăng tốc

  deploy:
    name: Deploy
    needs: build-and-push
    if: success() && github.ref == 'refs/heads/main'
    runs-on: self-hosted
    timeout-minutes: 5
    env:
      DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
      COMPOSE_DIR: D:\HTTT18B\Nam4_1\LTHDV\EProject-Phase-1

    steps:
      - name: Check Docker environment
        shell: pwsh
        run: |
          docker --version
          docker-compose --version

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Stop and cleanup
        shell: pwsh
        run: |
          cd $env:COMPOSE_DIR
          docker-compose down --remove-orphans

      - name: Pull latest images
        shell: pwsh
        run: |
          $services = @("api-gateway", "auth", "product", "order")
          foreach ($service in $services) {
              docker pull "$env:DOCKER_USERNAME/${service}:latest"
          }

      - name: Deploy services
        shell: pwsh
        run: |
          cd $env:COMPOSE_DIR
          docker-compose up -d
          Start-Sleep -Seconds 5
          docker ps