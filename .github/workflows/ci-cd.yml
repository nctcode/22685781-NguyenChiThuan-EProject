name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  Test:
    runs-on: ubuntu-latest
    timeout-minutes: 15  # Giới hạn thời gian chạy test

    services:
      mongodb:
        image: mongo:6
        ports:
          - 27017:27017
        options: >-
          --health-cmd "mongosh --eval 'db.adminCommand({ ping: 1 })'"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    strategy:
      matrix:
        # Chạy song song các service
        service: [auth, product]
        include:
          - service: auth
            path: auth
            port: 3000
          - service: product  
            path: product
            port: 3001

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: |
            ${{ matrix.path }}/package-lock.json
            package-lock.json

      - name: Cache node modules
        uses: actions/cache@v3
        with:
          path: |
            ${{ matrix.path }}/node_modules
            node_modules
          key: ${{ runner.os }}-node-${{ matrix.service }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-${{ matrix.service }}-

      - name: Setup test environment
        run: |
          if [ "${{ matrix.service }}" == "auth" ]; then
            echo "MONGODB_AUTH_URI=${{ secrets.MONGODB_AUTH_URI }}" >> ${{ matrix.path }}/.env
            echo "JWT_SECRET=${{ secrets.JWT_SECRET }}" >> ${{ matrix.path }}/.env
          elif [ "${{ matrix.service }}" == "product" ]; then
            echo "MONGODB_PRODUCT_URI=${{ secrets.MONGODB_PRODUCT_URI }}" >> ${{ matrix.path }}/.env
            echo "JWT_SECRET=${{ secrets.JWT_SECRET }}" >> ${{ matrix.path }}/.env
            echo "LOGIN_TEST_USER=${{ secrets.LOGIN_TEST_USER }}" >> ${{ matrix.path }}/.env
            echo "LOGIN_TEST_PASSWORD=${{ secrets.LOGIN_TEST_PASSWORD }}" >> ${{ matrix.path }}/.env
          fi

      - name: Install dependencies
        run: |
          cd ${{ matrix.path }} && npm ci --prefer-offline --no-audit
          cd .. && npm ci --prefer-offline --no-audit

      - name: Wait for MongoDB
        run: |
          echo "Waiting for MongoDB to be ready..."
          timeout 30s bash -c 'until nc -z localhost 27017; do sleep 2; done' || exit 1
          echo "MongoDB is ready!"

      - name: Run tests
        run: |
          cd ${{ matrix.path }}
          npm test

      # Chỉ chạy service auth cho integration test
      - name: Start auth service for integration tests
        if: matrix.service == 'auth'
        run: |
          cd auth
          npm start &
          npx wait-on http://localhost:3000/auth --timeout 30000

  build-and-push:
    name: Build & Push
    needs: Test
    if: success() && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    strategy:
      matrix:
        service: [api-gateway, auth, product, order]
        include:
          - service: api-gateway
            context: ./api-gateway
          - service: auth
            context: ./auth
          - service: product
            context: ./product  
          - service: order
            context: ./order

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Cache Docker layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ matrix.service }}-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-${{ matrix.service }}-

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build & push ${{ matrix.service }}
        uses: docker/build-push-action@v6
        with:
          context: ${{ matrix.context }}
          file: ${{ matrix.context }}/Dockerfile
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/${{ matrix.service }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64
          # Không push multi-arch để tăng tốc build

  deploy:
    name: Deploy
    needs: build-and-push
    if: success() && github.ref == 'refs/heads/main'
    runs-on: self-hosted
    timeout-minutes: 5
    env:
      DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
      COMPOSE_PROJECT_DIR: D:\HTTT18B\Nam4_1\LTHDV\EProject-Phase-1

    steps:
      - name: Check Docker environment
        shell: pwsh  # Sử dụng PowerShell thay vì cmd để nhanh hơn
        run: |
          Write-Host "Checking Docker environment..."
          docker --version
          docker-compose --version

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Stop and remove old containers
        shell: pwsh
        run: |
          Write-Host "Stopping old containers..."
          cd $env:COMPOSE_PROJECT_DIR
          docker-compose down --remove-orphans

      - name: Pull latest Docker images
        shell: pwsh
        run: |
          Write-Host "Pulling latest Docker images..."
          $services = @("api-gateway", "auth", "product", "order")
          $jobs = @()
          
          foreach ($service in $services) {
              $job = Start-Job -ScriptBlock {
                  param($service, $username)
                  docker pull "${username}/${service}:latest"
                  Write-Host "✓ $service pulled"
              } -ArgumentList $service, $env:DOCKER_USERNAME
              $jobs += $job
          }
          
          # Chờ tất cả jobs hoàn thành
          $jobs | Receive-Job -Wait
          Write-Host "All images pulled successfully"

      - name: Deploy with docker-compose
        shell: pwsh
        run: |
          Write-Host "Deploying services..."
          cd $env:COMPOSE_PROJECT_DIR
          docker-compose up -d --remove-orphans
          Write-Host "Deployment completed"

      - name: Health check
        shell: pwsh
        run: |
          Write-Host "Performing health checks..."
          Start-Sleep -Seconds 10
          docker ps
          Write-Host "DEPLOYMENT COMPLETED SUCCESSFULLY!"