name: CI/CD Pipeline

on: [push, pull_request]

jobs:
  test:
    runs-on: ubuntu-latest

    services:
      mongodb:
        image: mongo:6
        ports:
          - 27017:27017
        options: >-
          --health-cmd "mongosh --eval 'db.adminCommand({ ping: 1 })'"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    steps:
      - name: Checkout code
        uses: actions/checkout@v3.2.0

      - name: Cache node modules
        uses: actions/cache@v3
        with:
          path: |
            auth/node_modules
            product/node_modules
            node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}

      - name: Setup test environment
        run: |
          # Auth service
          echo "MONGODB_AUTH_URI=${{ secrets.MONGODB_AUTH_URI }}" >> auth/.env
          echo "JWT_SECRET=${{ secrets.JWT_SECRET }}" >> auth/.env

          # Product service
          echo "MONGODB_PRODUCT_URI=${{ secrets.MONGODB_PRODUCT_URI }}" >> product/.env
          echo "JWT_SECRET=${{ secrets.JWT_SECRET }}" >> product/.env
          echo "LOGIN_TEST_USER=${{ secrets.LOGIN_TEST_USER }}" >> product/.env
          echo "LOGIN_TEST_PASSWORD=${{ secrets.LOGIN_TEST_PASSWORD }}" >> product/.env

      - name: Install dependencies
        run: |
          cd auth && npm ci
          cd ../product && npm ci
          cd .. && npm ci

      - name: Wait for MongoDB
        run: |
          echo "Waiting for MongoDB to be ready..."
          for i in {1..10}; do
            nc -z localhost 27017 && echo "MongoDB is ready!" && break
            echo "Waiting 3s..."
            sleep 3
          done

      - name: Run auth tests
        run: |
          cd auth
          npm test

      - name: Start auth service for integration tests
        run: |
          cd auth
          npm start &
          echo "Waiting for auth service..."
          npx wait-on http://localhost:3001/health --timeout 30000

      - name: Run product tests
        run: |
          cd product
          npm test

      - name: Cleanup
        if: always()
        run: pkill -f "node" || true

  build-and-push:
    name: Build & Push Docker Images
    needs: test
    if: success() && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [api-gateway, auth, product, order]
    steps:
      # Checkout code
      - name: Checkout code
        uses: actions/checkout@v4

      # Setup Docker Buildx (BuildKit)
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Login Docker Hub
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # Build & Push Docker image (song song nhờ matrix)
      - name: Build & push ${{ matrix.service }}
        uses: docker/build-push-action@v6
        with:
          context: ./${{ matrix.service }}
          file: ./${{ matrix.service }}/Dockerfile
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/${{ matrix.service }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64

  # ==============================
  # 2️⃣ Deploy trên Windows Runner
  # ==============================
  deploy:
    name: Deploy on Localhost
    needs: build-and-push
    if: success() && github.ref == 'refs/heads/main'
    runs-on: self-hosted
    env:
      DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
    steps:
      # 1️⃣ Kiểm tra Docker environment
      - name: Check Docker environment
        shell: cmd
        run: |
          echo Checking Docker environment...
          docker --version
          docker-compose --version

      # 2️⃣ Login Docker Hub
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # 3️⃣ Dừng và xóa containers cũ
      - name: Stop and remove old containers
        shell: cmd
        run: |
          echo Stopping old containers...
          cd /d D:\HTTT18B\Nam4_1\LTHDV\EProject-Phase-1
          docker-compose down --remove-orphans

      # 4️⃣ Pull images mới nhất
      - name: Pull latest Docker images
        shell: cmd
        run: |
          echo Pulling latest Docker images...
          docker pull %DOCKER_USERNAME%/api-gateway:latest
          docker pull %DOCKER_USERNAME%/auth:latest
          docker pull %DOCKER_USERNAME%/product:latest
          docker pull %DOCKER_USERNAME%/order:latest
          echo All images pulled successfully

      # 5️⃣ Deploy với docker-compose
      - name: Deploy with docker-compose
        shell: cmd
        run: |
          echo Deploying services...
          cd /d D:\HTTT18B\Nam4_1\LTHDV\EProject-Phase-1
          docker-compose up -d --remove-orphans --force-recreate
          echo Deployment completed

      # 6️⃣ Thông báo deployment hoàn tất
      - name: Deployment summary
        shell: cmd
        run: |
          echo DEPLOYMENT COMPLETED SUCCESSFULLY!
          docker ps


