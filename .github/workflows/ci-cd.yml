name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  Test:
    runs-on: ubuntu-latest

    services:
      mongodb:
        image: mongo:6
        ports:
          - 27017:27017
        options: >-
          --health-cmd "mongosh --eval 'db.adminCommand({ ping: 1 })'"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Cache node modules
        uses: actions/cache@v3
        with:
          path: |
            auth/node_modules
            product/node_modules
            node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: |
            auth/package-lock.json
            product/package-lock.json
            package-lock.json

      - name: Install dependencies (parallel)
        run: |
          npm ci &
          cd auth && npm ci &
          cd ../product && npm ci &
          wait

      - name: Setup test environment
        run: |
          # Auth service
          echo "MONGODB_AUTH_URI=${{ secrets.MONGODB_AUTH_URI }}" >> auth/.env
          echo "JWT_SECRET=${{ secrets.JWT_SECRET }}" >> auth/.env

          # Product service
          echo "MONGODB_PRODUCT_URI=${{ secrets.MONGODB_PRODUCT_URI }}" >> product/.env
          echo "JWT_SECRET=${{ secrets.JWT_SECRET }}" >> product/.env
          echo "LOGIN_TEST_USER=${{ secrets.LOGIN_TEST_USER }}" >> product/.env
          echo "LOGIN_TEST_PASSWORD=${{ secrets.LOGIN_TEST_PASSWORD }}" >> product/.env

      - name: Wait for MongoDB
        run: |
          echo "Waiting for MongoDB to be ready..."
          until nc -z localhost 27017; do
            echo "Waiting 2s..."
            sleep 2
          done
          echo "MongoDB is ready!"

      - name: Run tests (parallel)
        run: |
          cd auth && npm test &
          cd ../product && npm test &
          wait

      - name: Cleanup
        if: always()
        run: pkill -f "node" || true

  build-and-push:
    name: Build & Push
    needs: Test
    if: success() && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [api-gateway, auth, product, order]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver-opts: |
            image=moby/buildkit:buildx-stable-1

      - name: Cache Docker layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build & push ${{ matrix.service }}
        uses: docker/build-push-action@v6
        with:
          context: ./${{ matrix.service }}
          file: ./${{ matrix.service }}/Dockerfile
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/${{ matrix.service }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64
          # Tối ưu build args cho build nhanh hơn
          build-args: |
            BUILDKIT_INLINE_CACHE=1

  deploy:
    name: Deploy
    needs: build-and-push
    if: success() && github.ref == 'refs/heads/main'
    runs-on: self-hosted
    env:
      DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
      COMPOSE_PROJECT_DIR: D:\HTTT18B\Nam4_1\LTHDV\EProject-Phase-1
    steps:
      - name: Check Docker environment
        shell: powershell
        run: |
          Write-Host "Checking Docker environment..."
          docker --version
          docker compose version

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Pull images in parallel
        shell: powershell
        run: |
          Write-Host "Pulling latest Docker images in parallel..."
          $services = @("api-gateway", "auth", "product", "order")
          $jobs = @()
          
          foreach ($service in $services) {
              $jobs += Start-Job -ScriptBlock {
                  param($user, $svc)
                  docker pull "${user}/${svc}:latest"
                  Write-Host "✓ Pulled ${user}/${svc}:latest"
              } -ArgumentList $env:DOCKER_USERNAME, $service
          }
          
          $jobs | Receive-Job -Wait
          Write-Host "All images pulled successfully"

      - name: Deploy services
        shell: powershell
        run: |
          Write-Host "Deploying services..."
          cd $env:COMPOSE_PROJECT_DIR
          docker compose down --remove-orphans
          docker compose up -d --remove-orphans --force-recreate
          
          Write-Host "Waiting for services to be healthy..."
          Start-Sleep -Seconds 10
          docker ps
          Write-Host "DEPLOYMENT COMPLETED SUCCESSFULLY!"